@page "/Game"
@page "/Game/{ip}"
@using WebApp.Managers
@using static WebApp.Model.Purchasables
@inject IJSRuntime JsRunTime

<h3>Game</h3>

<p role="status">Ip: @Ip</p>

<p role="status">Balance: @Balance</p>


<button class="btn btn-primary" @onclick="@StartConnection">Click me</button>
<button class="btn btn-primary" @onclick="@Ping">Ping</button>

@foreach (Purchasable p in Purchasables)
{
    <button class="btn btn-primary" @onclick="() => {TryBuyPurchasable(p.Id);}">
        @p.Name @p.Price Count:@GetPurchaseAmount(p.Id)
    </button>
}

@code
{
    [Parameter]
    public string Ip { get; set; }

    public int Balance { get; set; } = 0;

    public List<Purchasable> Purchasables { get; set; } = new List<Purchasable>();

    private Dictionary<int, int> _purchases = new Dictionary<int, int>();

    GameManager gameManager = new GameManager();

    private async Task StartConnection()
    {
        await gameManager.ConnectToGame(Ip);
    }

    private void Ping()
    {
        gameManager.PingServer();
        Ip = "ping";
    }

    public int GetPurchaseAmount(int purchasableId)
    {
        int amount = 0;

        if (_purchases.ContainsKey(purchasableId))
        {
            amount = _purchases[purchasableId];
        }

        return amount;
    }

    public async void TryBuyPurchasable(int purchasableId)
    {
        Purchasable purchasable = Purchasables.Find(p => p.Id == purchasableId);

        if (Balance >= purchasable.Price)
        {
            await gameManager.TryBuyPurchasable(purchasableId);
        } else
        {
            await JsRunTime.InvokeVoidAsync("alert", "Insufficient funds!");
        }
    }

    protected override void OnInitialized()
    {
        Purchasables = new List<Purchasable>();
        base.OnInitialized();

        gameManager.BalanceUpdateEvent += (balance) =>
        {
            this.Balance = balance;
            InvokeAsync(StateHasChanged);
        };

        gameManager.PongEvent += () =>
        {
            Ip = "Pong";
            InvokeAsync(StateHasChanged);
        };

        gameManager.ReceivePurchasablesEvent += (purchasables) =>
        {
            Purchasables = purchasables;
            InvokeAsync(StateHasChanged);
        };

        gameManager.ReceivePurchasesEvent += (purchases) =>
        {
            _purchases = purchases;
            InvokeAsync(StateHasChanged);
        };

        gameManager.ReceivePurchaseUpdateEvent += (purchaseId, amount) =>
        {
            _purchases[purchaseId] = amount;
            InvokeAsync(StateHasChanged);
        };
    }
}